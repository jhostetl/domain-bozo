{"version":3,"sources":["Rhymes.js","index.js"],"names":["Rhymes","inputEl","useRef","useState","rhymeWords","setWordList","savedWords","setSavedWords","description","setDescription","elements","i","item","elem","RhymeItem","onSave","idx","includes","newSavedList","concat","saveWord","push","length","addRhyme","search_word","current","value","word_list","fetch","then","response","json","result","grouped_results","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","Array","from","keys","sort","key","groupBy","a","focus","props","className","onClick","join","onKeyDown","event","ref","type","ReactDOM","render","href","document","getElementById"],"mappings":"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","file":"static/js/main.4b98ba32.chunk.js","sourcesContent":["\nimport {useState, useRef, memo, useCallback} from 'react';\n\n\n\n\n\nfunction Rhymes () {\n    const inputEl = useRef(null);\n    const [rhymeWords, setWordList] = useState([]);\n    const [savedWords, setSavedWords] = useState([]);\n    const [description, setDescription] = useState([]);\n\n    function saveWord(idx) {\n\n        if (savedWords.includes(rhymeWords[idx])){\n           const newSavedList = savedWords; \n           setSavedWords(newSavedList);\n        }else{\n           const newSavedList = savedWords.concat(rhymeWords[idx]); \n           setSavedWords(newSavedList);            \n        }\n        \n    }\n\n    const elements = [];\n    for(let i = 0; i<rhymeWords.length; i++) {\n        const item = rhymeWords[i];\n        const elem = <RhymeItem onSave={() => saveWord(i)} key={i} description={item} />;\n        elements.push(elem)\n    }\n\n    function addRhyme() {\n       \n        setDescription(\"loading...\");\n        const search_word = inputEl.current.value;\n        const search_string = \"https://api.datamuse.com/words?rel_rhy=\" + search_word;\n        const word_list = [];\n\n        fetch(search_string).then(response => response.json())\n            .then((result) => {\n                if (result.length > 0){              \n                    const grouped_results = groupBy(result, \"numSyllables\");\n                    for (const property in grouped_results) {                        \n                        for (const a in grouped_results[property]) {\n                            word_list.push(grouped_results[property][a][\"word\"]);\n                        }                   \n                    }\n                    setWordList(word_list);\n                    setDescription(\"Words that rhyme with \" + search_word);\n                }else{\n                    setWordList(word_list);\n                    setDescription(\"No words rhyme with \" + search_word);\n                }              \n            }); \n      \n        inputEl.current.value = '';\n        inputEl.current.focus();\n    }\n\n    function addSynonym() {\n        setDescription(\"loading...\");\n        const search_word = inputEl.current.value;\n        const search_string = \"https://api.datamuse.com/words?ml=\" + search_word;\n        const word_list = [];\n\n        fetch(search_string).then(response => response.json())\n            .then((result) => {\n                if (result.length > 0){   \n                    for (let i = 0; i < result.length; i++){\n                        word_list.push(result[i][\"word\"]);                               \n                    }                           \n                    setWordList(word_list);\n                    setDescription(\"Words with a similar meaning to \" + search_word);\n                }else{\n                    setWordList(word_list);\n                    setDescription(\"No words with a similar meaning to \" + search_word);                   \n                }              \n            }); \n      \n        inputEl.current.value = '';\n        inputEl.current.focus();\n    }\n\n    function onKeydown(event) {\n        if(event.key === 'Enter') {\n            addRhyme();\n        }\n    }\n\n    function RhymeItem(props) {\n        return <li>{props.description} <button className = \"btn btn-save btn-outline-secondary\" onClick={props.onSave}>Save</button></li>\n    }\n\n    // or:\n    // const elements = Rhymes.map((item) => <RhymeItem description={item} /> );\n    return <div>\n    <div>{savedWords.join(', ')}</div>\n    <div className=\"input-group col\">\n        <input className = \"form-control\" onKeyDown={onKeydown} ref={inputEl} type=\"text\"></input>\n        <button onClick={addRhyme} className = \"btn btn-primary\">Show Rhyming Words</button>\n        <button onClick={addSynonym} className = \"btn btn-light btn-outline-dark\">Show Synonyms</button>\n    </div>    \n    <h5 className = \"output_description\">{description}</h5>\n    <ul>{elements}</ul>\n    </div>;\n}\n\nexport default Rhymes;\n\n\n\n/**\n * Returns a list of objects grouped by some property. For example:\n * groupBy([{name: 'Steve', team:'blue'}, {name: 'Jack', team: 'red'}, {name: 'Carol', team: 'blue'}], 'team')\n * \n * returns:\n * { 'blue': [{name: 'Steve', team: 'blue'}, {name: 'Carol', team: 'blue'}],\n *    'red': [{name: 'Jack', team: 'red'}]\n * }\n * \n * @param {any[]} objects: An array of objects\n * @param {string|Function} property: A property to group objects by\n * @returns  An object where the keys representing group names and the values are the items in objects that are in that group\n */\nfunction groupBy(objects, property) {\n    // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n    // value for property (obj[property])\n    if(typeof property !== 'function') {\n        const propName = property;\n        property = (obj) => obj[propName];\n    }\n\n    const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n    for(const object of objects) {\n        const groupName = property(object);\n        //Make sure that the group exists\n        if(!groupedObjects.has(groupName)) {\n            groupedObjects.set(groupName, []);\n        }\n        groupedObjects.get(groupName).push(object);\n    }\n\n    // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n    const result = {};\n    for(const key of Array.from(groupedObjects.keys()).sort()) {\n        result[key] = groupedObjects.get(key);\n    }\n    return result;\n}\n\n\n","import ReactDOM from 'react-dom';\nimport Rhymes from './Rhymes';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Styles.css';\n\nReactDOM.render(<>\n\t    <nav className=\"header navbar navbar-dark\">\n            <a href = \"/\"><span className=\"navbar-brand mb-0 h1\">DB</span></a>\n        </nav> \n        <div className = \"container\">\n\t\t\t<h3>Rhyme Finder (579 Problem Set 6 in React)</h3><Rhymes />\n\t\t</div>\n\n\n\t\t</>, document.getElementById('root'));\n"],"sourceRoot":""}